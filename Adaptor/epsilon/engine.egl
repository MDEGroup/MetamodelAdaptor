[% 	
	// Imports
	import "utility.egl";
	import "dataStructure.egl";
	import "checking.egl";
	

// EXPLORING CHANGES

operation explore(el: Any, comp: Any, elChanging: Map) {

	// setting source and destination models
	var source = el.right;
	var dest = el.left;	
	
	// inspecting MATCHES	
	
	// PACKAGES
	if ( isPackageMatch(el) ) {
				
		// Identifying Packages
		"Exploring package changes:".println("\n\t");		
		source.println("Source: ");
		dest.println("Destination: ");
		
		// Explore the package changes
		operatePackDiff(el, elChanging);
		
		// Explore changes in the package elements			
		if (not el.submatches.isEmpty())
			for (subEl in el.submatches) 
				explore(subEl, comp, elChanging);
	}
	
	// CLASSES
	else if ( isClassMatch(el) ) {			
		
		// Identifying Class
		("Class [ " + classIdentification(source, dest) + " ]").println("\n\t");
		
		// Ignore DELETED classes
		if ( not elChanging.DSisDeletedClass(source) ) {
			
			// Explore the class changes
			operateClassDiff(source, el, elChanging);		
			
			// write class rule (head)
			writeDownClassHeadRule( source, dest );
			
			// Explore changes in the class elements			
			if (not el.submatches.isEmpty())
				for (subEl in el.submatches) 
					explore(subEl, comp, elChanging);
					
			// write class rule (foot)
			writeDownClassFootRule( source, dest );
		}
		else "Ignored DELETED class!".println();
				
		"\t--\t--\t--".println(); 	
	}
	
	// ATTRIBUTES
	else if ( isAttributeMatch(el) ) {
		
		// Identifying Attribute		
			
		// explore the atribute changes
		operateAttributeDiff(source, dest, el, elChanging);		 
	}
	
	// REFERENCES
	else if ( isReferenceMatch(el) ) {
		
		// Identifying Reference		
			
		// explore the reference changes				
		operateReferenceDiff(source, dest, el, elChanging);				
	}
	
	// ERROR!
	else {
		"I can't recognise what is changed!".println("!!!!!!");
	}
}

// CHECKING/ANALYSING CHANGES

// ... package
operation operatePackDiff(el: Any, elChanging: Map) {
	for (x in el.differences)
		switch ( x.type().name ) {			
			case 'ReferenceChange': 
				x.value.name.println(x.kind + ' Reference ' + x.value.type().name + ' : ');
				if ( x.isDeletedElement() and x.isClassElement() )
					elChanging.DSaddDeletedClass(x.value);
			
			case 'AttributeChange' : 
				x.value.println(x.kind + ' Attribute ' + x.attribute.name + ' : ');
			
			default : 
				x.value.println(x.kind + ' Generic: ');
		}
}

// ...classes
operation operateClassDiff(source, el: Any, elChanging: Map) {
	
	// changes
	for (x in el.differences) {
		switch ( x.type().name ) {
			case 'ReferenceChange' :
			
				// class attributes
				if ( x.isAttributeElement() ) { 
					if ( x.isMovedElement() ) {
						elChanging.DSaddMovedAttribute(x.value);							
					}	
					else if ( x.isAddedElement() ) {
						elChanging.DSaddAddedAttribute(x.value);
					}					
					else if ( x.isDeletedElement() ) {
						elChanging.DSaddDeletedAttribute(x.value);									
					}
				}
				
				// class references
				else if ( x.isReferenceElement() ) { 
					if ( x.isMovedElement() ) {
						elChanging.DSaddMovedReference(x.value);							
					}
					else if ( x.isAddedElement() ) {
						elChanging.DSaddAddedReference(x.value);
					}						
					else if ( x.isDeletedElement() ) {
						elChanging.DSaddDeletedReference(x.value);									
					}
				}					
			
			case 'AttributeChange' :
				
			default : 
				x.value.println(x.kind + ' Generic: ');
		}			
	}	
}


// ... attributes
operation operateAttributeDiff(source, dest, el: Any, elChanging: Map) {

	// operate Attribute adaptation
	if ( elChanging.DSisDeletedAttribute(source) ) {
		(source.name + ' > ' + source.getEType().name + ' ( so ignored )').println("DELETED ATTRIBUTE: ");
	}	
	else if ( elChanging.DSisMovedAttribute(dest) ) {
		(dest.name + ' > ' + dest.getEType().name).println("MOVED ATTRIBUTE: ");
		writeDownAttributeMove( source, dest );
	}
	else if ( elChanging.DSisAddedAttribute(dest) ) {
		(dest.name + ' > ' + dest.getEType().name).println("ADDED ATTRIBUTE: ");
		writeDownAttributeAdd( source, dest );
	}
	else {
		(dest.name + ' > ' + dest.getEType().name).println("COPIED ATTRIBUTE: ");
		writeDownAttributeCopy( source, dest );
	}	
}

// ... references
operation operateReferenceDiff(source, dest, el: Any, elChanging: Map) {

	// operate Reference adaptation
	if ( elChanging.DSisDeletedReference(source) ) {
		(source.name + ' > ' + source.getEType().name + ' ( so ignored )').println("DELETED REFERENCE: ");
	}
	else if ( elChanging.DSisMovedReference(dest) ) {
		(dest.name + ' > ' + dest.getEType().name).println("MOVED REFERENCE: ");
		writeDownReferenceMove( source, dest );
	}
	else if ( elChanging.DSisAddedReference(dest) ) {
		(dest.name + ' > ' + dest.getEType().name).println("ADDED REFERENCE: ");
		writeDownReferenceAdd( source, dest );
	}
	else {
		(dest.name + ' > ' + dest.getEType().name).println("COPIED REFERENCE: ");
		writeDownReferenceCopy( source, dest );
	}
		
}

// APPLYING/CODING CHANGES

// ... package

// ... classes
operation writeDownClassHeadRule(source, dest) {
	var cName = getUndeletedClassName(source, dest);
	var cExt = listExtensionClassParent(dest);		
%]
	
	// Adapting class '[%=cName%]' @ package '[%=dest.eContainer().name%]'
	rule Adapt_[%=cName%]
	transform s: Input![%=cName%]
	to d: Output![%=cName%]
	[%=cExt%]	
	{	
		var clChoiceList = cListCl();
		var sourceCh;
		var sourceList;
	
[%
	
}

operation writeDownClassFootRule(source, dest) {	
%]
	}
[%	
}

// ... attributes
operation writeDownAttributeCopy(source, dest) {
%]
		d.[%=dest.name%] = s.[%=source.name%]; 
[%
}

operation writeDownAttributeAdd( source, dest ) {
	if ( isIntegerAttribute(dest) ) {
%]
		d.[%=dest.name%] = System.user.promptInteger('Insert the new ( integer ) value for "[%=dest.name%]" @ class "' + s + '":'); 
[%
	}
	else if ( isFloatAttribute(dest) ) {
%]
		d.[%=dest.name%] = System.user.promptReal('Insert the new ( float ) value for "[%=dest.name%]" @ class "' + s + '":');
[%
	}
	else if ( isCharAttribute(dest) ) {
%]
		d.[%=dest.name%] = System.user.prompt('Insert the new ( char ) value for "[%=dest.name%]" @ class "' + s + '":').charAt(0);
[%
	}
	else if ( isStringAttribute(dest) ) {
%]
		d.[%=dest.name%] = System.user.prompt('Insert the new ( string ) value for "[%=dest.name%]" @ class "' + s + '":');
[%
	}
}

operation writeDownAttributeMove( source, dest ) {	
%]
			sourceList = cFilterListCl(clChoiceList, '[%=source.eContainer().name%]');
			sourceCh = System.user.choose('Choose the source Class for "[%=dest.name%]" @ Class "' + s + '":', sourceList);
		d.[%=dest.name%] = sourceCh.[%=source.name%]; 
[%
}

// ... references
operation writeDownReferenceCopy(source, dest) {
%]
		d.[%=dest.name%] = s.[%=source.name%].equivalent(); 
[%
}

operation writeDownReferenceAdd( source, dest ) {	
%]
			sourceList = cFilterListCl(clChoiceList, '[%=dest.getEType().name%]');
		d.[%=dest.name%] = System.user.choose('Choose the new reference for "[%=dest.name%]" @ Class "' + s + '":', sourceList ).equivalent();
[%
}

operation writeDownReferenceMove( source, dest ) {
%]
			sourceList = cFilterListCl(clChoiceList, '[%=source.eContainer().name%]');
			sourceCh = System.user.choose('Choose the source Class for "[%=dest.name%]" @ Class "' + s + '":', sourceList);
		d.[%=dest.name%] = sourceCh.[%=source.name%].equivalent(); 
[%
}
%]