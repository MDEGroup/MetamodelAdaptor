[%
// UTILITY

// given Source ad Dest, return a string identifying the class and the owner package		
operation classIdentification(source, dest): String {
	if (dest <> null)
		if (dest.eContainer() <> null)
			return dest.name + ' @ ' + dest.eContainer().name;
		else return dest.name;
	else if (source <> null)
			if (source.eContainer() <> null)
				return source.name + ' @ ' + source.eContainer().name;
			else return source.name;
	else return 'no name';
}

// given Source and Dest, return the name of a class not deleted
operation getUndeletedClassName(source, dest): String {
	if (dest <> null)
		return dest.name;	
	else return '';
}

// given a Class returns the list of all parent classes (if exists)
operation listExtensionClassParent(orig): String {
	if ( not orig.getESuperTypes().isEmpty() ) {		
		var ris = new Sequence();
		for (x in orig.getESuperTypes())
			if (not x.isAbstract() )
				ris.add('Adapt_' + x.name);
		if ( ris.isEmpty() ) return '';
		else return 'extends ' + ris.concat(',');		
	}
	else return '';	
}

// given a Class returns the list of all virtual parent classes (if exists)
operation listExtensionVirtualClassParent(orig): String {
	if ( not orig.getESuperTypes().isEmpty() ) {		
		var ris = new Sequence();
		for (x in orig.getESuperTypes())
			if (x.isAbstract() )
				ris.add('Adapt_' + x.name + '(s, d);');
		if ( ris.isEmpty() ) return '';
		else return ris.concat(' ');		
	}
	else return '';	
}

// given a class create the list of the supertypes
operation createSubTypesList(cl: Any) {				
	for (x in cl.eContainer().eContents() ) 				
		if (searchForSuperType(x, cl)) {
%]
			ft.add('[%=x.name%]');
[%
		}
}

operation Any searchForSuperType(cl, st: Any) {	
	if ( cl.name == st.name ) return true;
	else {
		var ris = false;
		for (x in cl.getESuperTypes() ) 
			ris = ris or searchForSuperType(x, st);
		return ris;		
	}	 
}
%]