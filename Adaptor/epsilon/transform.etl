pre {
"$> Start migration...\n".println();
}

post {
"$> Migration completed.\n".println();
}
	
	// Adapting class 'Famiglia' @ package 'Famiglia-out'
	rule Adapt_Famiglia
	transform s: Input!Famiglia
	to d: Output!Famiglia
		
	{	
		var clChoiceList = cListCl();
		var sourceCh;
		var sourceList;
		var ft;
	
		d.cognome = System.user.prompt('Insert the new ( string ) value for "cognome" @ class "' + s + '":');
		d.padre = s.padre.equivalent(); 
		d.madre = s.madre.equivalent(); 
		d.figli = s.figli.equivalent(); 
	}
	
	// Adapting class 'Figlio' @ package 'Famiglia-out'
	rule Adapt_Figlio
	transform s: Input!Figlio
	to d: Output!Figlio
	extends Adapt_Persona	
	{	
		var clChoiceList = cListCl();
		var sourceCh;
		var sourceList;
		var ft;
	
		d.famiglia = s.famiglia.equivalent(); 
	}
	
	// Adapting class 'Madre' @ package 'Famiglia-out'
	rule Adapt_Madre
	transform s: Input!Madre
	to d: Output!Madre
	extends Adapt_Persona	
	{	
		var clChoiceList = cListCl();
		var sourceCh;
		var sourceList;
		var ft;
	
		d.famiglia = s.famiglia.equivalent(); 
	}
	
	// Adapting class 'Padre' @ package 'Famiglia-out'
	rule Adapt_Padre
	transform s: Input!Padre
	to d: Output!Padre
	extends Adapt_Persona	
	{	
		var clChoiceList = cListCl();
		var sourceCh;
		var sourceList;
		var ft;
	
		d.famiglia = s.famiglia.equivalent(); 
			ft = new Sequence;
			ft.add('Persona');
			ft.add('Padre');
			ft.add('Madre');
			ft.add('Figlio');
			sourceList = cFilterListCl(clChoiceList, ft);
		d.prediletti = System.user.chooseMany('Choose the new reference for "prediletti" @ Class "' + s + '":', sourceList ).equivalent();
	}
	
	// Adapting class 'Persona' @ package 'Famiglia-out'
	rule Adapt_Persona
	transform s: Input!Persona
	to d: Output!Persona
		
	{	
		var clChoiceList = cListCl();
		var sourceCh;
		var sourceList;
		var ft;
	
		d.nome = s.nome; 
			ft = new Sequence;
			ft.add('Famiglia');
			sourceList = cFilterListCl(clChoiceList, ft);
			sourceCh = System.user.choose('Choose the source Class for "indirizzo" @ Class "' + s + '":', sourceList);
		d.indirizzo = sourceCh.indirizzo; 
	}

// list of all Input Classes
operation cListCl(): Sequence {	
	var clChoiceList = new Sequence;
	var listOfInClasses = Input.allInstances();	
	for (x in listOfInClasses)
		clChoiceList.add(x);
	return clChoiceList;
}

// search for the first match
operation Any cFilterType(ft): Boolean {
	for (x in ft)
		if ( self.type().name == x ) return true;
	return false;
}

// filter class list by Type Name
operation cFilterListCl(tot: Sequence, filterTypes: Sequence): Sequence {
	var ris = new Sequence;
	for (x in tot)
		if ( x.cFilterType(filterTypes) )
			ris.add(x);		
	return ris;
}